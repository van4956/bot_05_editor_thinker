Analyze the bot_05_editor_thinker repository.

README:
# Editor Thinker

*–ë–æ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –º—ã—Å–ª–µ–π*


Repository Structure: bot_05_editor_thinker
/.env.example
/.gitignore
/README.md
/app.py
/common/
/config_data/
/filters/
/handlers/
/middlewares/
/prescription.txt
/requirements.txt
/temp_voice/
/temp_voice/AwACAgIAAxkBAAILCmdD12WDgiawL4CcKV0lCSWo-iGGAAKOZwACLVkYSmX7OnYkSDzcNgQ.ogg
/temp_voice/AwACAgIAAxkBAAILIGdD2OE18r8uNAmwjpGcPUJ7X70WAAKUZwACLVkYSqvz8zSEhdl5NgQ.ogg
/temp_voice/AwACAgIAAxkBAAILJ2dD2XcJ8dhakEY-FachIOseBIluAAKXZwACLVkYSt9sY5tsm1THNgQ.ogg
/temp_voice/AwACAgIAAxkBAAILLmdD2c_SNwKb0YboVpN4qCP3NEGlAAKYZwACLVkYSiaK_tihX7OcNgQ.ogg
/temp_voice/AwACAgIAAxkBAAILNGdD2lVXyUcVaqCU6IWHA-4tuWW_AAKZZwACLVkYSoCw3DVn_N0eNgQ.ogg
/middlewares/counter.py
/handlers/admin.py
/handlers/editor.py
/handlers/start.py
/filters/chat_type.py
/filters/is_admin.py
/config_data/config.py
/common/comands.py
/common/images/
/common/keyboard.py
/common/images/image_info.jpg


File: /.env.example
Content:
BOT_TOKEN=<bot_token>
BOT_TOKEN_2=<bot_token_2>
OWNER=<user_id>
ADMIN_LIST=<user_id>,<user_id>
HOME_GROUP=<chat_id>
WORK_GROUP=<chat_id>,<chat_id>

PAYMASTER_PROVIDER_TOKEN=<provider_token>
API_WEATHER=<api_key>
API_CURRENCY=<api_key>
API_GPT=<api_key>

DB_LITE=sqlite+aiosqlite:///database/sqlite.db
DB_POST=postgresql+asyncpg://<user>:<password>@<host>:<port>/<database>
POSTGRES_DB=<database>
POSTGRES_USER=<user>
POSTGRES_PASSWORD=<password>

REDIS_HOST=<host>
REDIS_PORT=<port>

PGADMIN_DEFAULT_EMAIL=<email>
PGADMIN_DEFAULT_PASSWORD=<password>

INFLUXDB_ADMIN_USER=<user>
INFLUXDB_ADMIN_PASSWORD=<password>
INFLUXDB_URL=http://influxdb:8086
INFLUXDB_TOKEN=<token>
INFLUXDB_BUCKET=<bucket>
INFLUXDB_ORG=<org>

GF_SECURITY_ADMIN_USER=<user>
GF_SECURITY_ADMIN_PASSWORD=<password>

File: /.gitignore
Content: Skipped binary file

File: /README.md
Content:
# Editor Thinker

*–ë–æ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –º—ã—Å–ª–µ–π*


File: /app.py
Content:
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='  -  [%(asctime)s] #%(levelname)-5s -  %(name)s:%(lineno)d  -  %(message)s')
logger = logging.getLogger(__name__)


import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.strategy import FSMStrategy
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config_data.config import Config, load_config
from handlers import admin, start, editor
from common.comands import private
from middlewares import counter


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = MemoryStorage()  # –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≤—Å—ë —Å—Ç–∏—Ä–∞–µ—Ç—Å—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä')
bot = Bot(token=config.tg_bot.token,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML,
                                       link_preview=None,
                                       link_preview_is_disabled=None,
                                       link_preview_prefer_large_media=None,
                                       link_preview_prefer_small_media=None,
                                       link_preview_show_above_text=None))
bot.owner = config.tg_bot.owner
bot.admin_list = config.tg_bot.admin_list
bot.home_group = config.tg_bot.home_group


dp = Dispatcher(fsm_strategy=FSMStrategy.USER_IN_CHAT, storage=storage)


# –ü–æ–º–µ—â–∞–µ–º –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ workflow_data –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
some_var_1 = 1
some_var_2 = 'Some text'
dp.workflow_data.update({'my_int_var': some_var_1,
                         'my_text_var': some_var_2})

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∏–¥–ª–≤–∞—Ä–∏
dp.update.outer_middleware(counter.CounterMiddleware())  # –ø—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(start.start_router)
dp.include_router(admin.admin_router)
dp.include_router(editor.editor_router)



# –¢–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –±–æ—Ç–æ–º
ALLOWED_UPDATES = dp.resolve_used_update_types()  # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–æ—É—Ç–µ—Ä–∞–º

# –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup():
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id = bot.home_group[0], text = f"ü§ñ  @{bot_username}  -  –∑–∞–ø—É—â–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def on_shutdown():
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id = bot.home_group[0], text = f"‚ò†Ô∏è  @{bot_username}  -  –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã - —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ (—Ç–æ —á—Ç–æ –±–æ—Ç –ø–æ–ª—É—á–∏–ª –ø–æ–∫–∞ —Å–ø–∞–ª)
    await bot.delete_webhook(drop_pending_updates=True)

    # –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ –≤–æ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    await bot.delete_my_commands(scope=types.BotCommandScopeAllPrivateChats())

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())


    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        await dp.start_polling(bot,
                               allowed_updates=ALLOWED_UPDATES,)
                            #    skip_updates=False)  # –ï—Å–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏, –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())


File: /prescription.txt
Content:
1) —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º (–Ω–æ–≤—ã–º –±–æ—Ç–æ–º)

2) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ .vscode - –¥–æ–ø–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤, —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ —Ç–¥.

3) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .pylintrc - —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–∞–π–ª–∏–Ω—Ç–µ—Ä–∞ (–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞, pip8, –≤ —Å–ø–∏—Å–æ–∫–µ –Ω–µ –Ω—É–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏/–æ—à–∏–±–∫–∏)

4) —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É venv —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª

python -m venv venv
python3.11 -m venv venv

5) –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

source venv/Scripts/activate         - –¥–ª—è GitBash (—Ä–µ–∫—É–º–µ–Ω–¥—É–µ—Ç—Å—è)
venv\Scripts\activate                - –¥–ª—è Windows
deactivate                           - –≤—ã–π—Ç–∏ –∏–∑ –≤–∏—Ä—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è

6) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏

python --version
pip --version
git --version
docker --version

7) —Å–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è requirements

pip install -r requirements.txt

pip freeze > requirements.txt         - —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª requirements.txt –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ env
pipreqs . --force                     - —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª requirements.txt –∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞

pip uninstall <github>                - —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏–∑ env

8) –µ—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Redis

—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
https://stepik.org/lesson/870034/step/3?unit=874212

–µ—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã
sudo apt update && sudo apt dist-upgrade && sudo apt install redis

–µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å VPN
–µ—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç - –≤ —Ñ–∞–π–ª–µ main –æ—Ç–∫–ª—é—á–∏—Ç—å Redis, –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ MemoryStorage

–≤–æ–æ–±—â–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å Redis, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ docker !!!



9) –∏–Ω—Ç–µ—Ä–Ω–∞–ª–∏–∑–∞—Ü–∏—è gettext

–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª-—à–∞–±–ª–æ–Ω .pot –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
pybabel extract -o locales/messages.pot -k _:1,1t -k _:1,2 --copyright-holder="AdvancedBotTemplate" --project="bot_00_template" --version=0.1 --msgid-bugs-address=gontscharowiwan@yandex.ru --input-dirs=.

—Å–æ–∑–¥–∞–µ–º –¥–ª—è gettext –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã .po –¥–ª—è –Ω—É–∂–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π
pybabel init -i locales/messages.pot -d locales -D bot_00_template -l en
pybabel init -i locales/messages.pot -d locales -D bot_00_template -l ru
pybabel init -i locales/messages.pot -d locales -D bot_00_template -l de
pybabel init -i locales/messages.pot -d locales -D bot_00_template -l ja

–¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã, –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ (—á–µ–ª–æ–≤–µ–∫–æ–≤)

–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mo —á—Ç–æ–±—ã –Ω–∞—à –±–æ—Ç –Ω–∞—É—á–∏–ª—Å—è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞
pybabel compile -d locales -D bot_00_template


–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É extract, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª .pot, –≤ –≤–µ—Ä—Å–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–æ—Ä–Ω—ã–π —Ä–µ–ª–∏–∑ 0.1.1
pybabel extract -o locales/messages.pot -k _:1,1t -k _:1,2 --copyright-holder="AdvancedBotTemplate" --project="bot_00_template" --version=0.2.4 --msgid-bugs-address=gontscharowiwan@yandex.ru --input-dirs=.

–¥–∞–ª–µ–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π
pybabel update -i locales/messages.pot -d locales -D bot_00_template -l en
pybabel update -i locales/messages.pot -d locales -D bot_00_template -l ru
pybabel update -i locales/messages.pot -d locales -D bot_00_template -l de
pybabel update -i locales/messages.pot -d locales -D bot_00_template -l ja

–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª—ã .po, —Ç–∞–º –≥–¥–µ –º–µ—Ç–∫–∞ <#, fuzzy> –ø–æ–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥, –∏ —É–±–∏—Ä–∞–µ–º –º–µ—Ç–∫—É <#, fuzzy>

—Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –±–∏–Ω–∞—Ä–Ω—ã–π –≤–∏–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
pybabel compile -d locales -D bot_00_template



10) Docker

docker --version
docker-compose --version

docker-compose up -d                  - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ docker-compose.yml
docker-compose up --build -d          - –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —É—á–∏—Ç—ã–≤–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
docker-compose down                   - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã

docker-compose down && docker image prune -f && docker system prune && docker system df
docker-compose up --build -d && docker logs -f container_bot

docker ps                             - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞)
docker ps -s                          - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω–∏–º–∞–µ–º–æ–º –º–µ—Å—Ç–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker logs <–∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞>          - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
docker logs -f <–∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞>       - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
docker logs -f container_bot

docker stop $(docker ps -a -q)        - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker rm $(docker ps -a -q)          - —É–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

docker images                         - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤
docker-compose build                  - –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã (–ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ)
docker rmi <image_id>                 - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤

docker volume ls                      - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ volumes, –≤–∫–ª—é—á–∞—è –∏—Ö –∏–º–µ–Ω–∞ –∏ –¥—Ä–∞–π–≤–µ—Ä—ã
docker volume rm <volume_name>        - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ volume
docker volume prune                   - —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes (volumes, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏)
docker volume inspect <volume_name>   - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º volume


docker system df                      - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –∑–∞–Ω–∏–º–∞–µ–º–æ–º –æ–±—Ä–∞–∑–∞–º–∏, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏, volume'–∞–º–∏ –∏ –∫–µ—à–µ–º
docker system prune                   - –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—ç—à–∏, –æ–±—Ä–∞–∑—ã –∏ —Ç–æ–º–∞



11) Git

git init

git pull

git add .
git commit -m "text commit"

git push                         ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git rebase                       ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ git rebase –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
git fetch                        ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

rm -rf .git                      ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π Git

File: /requirements.txt
Content:
asyncio==3.4.3            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
aiogram>=3.8.0            # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º async/await
aiogram-dialog==2.1.0     # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ Telegram-–±–æ—Ç–∞—Ö –Ω–∞ –±–∞–∑–µ aiogram

cachetools==5.5.0         # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Python
environs==11.2.1          # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
python-dotenv>=1.0.1      # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
icecream==2.1.3           # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –¥–µ–±–∞–≥–∏–Ω–≥–∞
pipreqs                   # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ requirements.txt

requests==2.32.3          # –ü—Ä–æ—Å—Ç–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
aiohttp>=3.9.5            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è HTTP-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTP-–∑–∞–ø—Ä–æ—Å–∞–º–∏
openai==1.55.0            # –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API OpenAI

SQLAlchemy>=2.0.36        # ORM (–æ–±—ä–µ–∫—Ç–Ω–æ-—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Python
openai-whisper==1.1.0     # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é Whisper –æ—Ç OpenAI
ffmpeg-python==0.2.0      # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FFmpeg —á–µ—Ä–µ–∑ Python


File: /temp_voice/AwACAgIAAxkBAAILCmdD12WDgiawL4CcKV0lCSWo-iGGAAKOZwACLVkYSmX7OnYkSDzcNgQ.ogg
Content: Skipped binary file

File: /temp_voice/AwACAgIAAxkBAAILIGdD2OE18r8uNAmwjpGcPUJ7X70WAAKUZwACLVkYSqvz8zSEhdl5NgQ.ogg
Content: Skipped binary file

File: /temp_voice/AwACAgIAAxkBAAILJ2dD2XcJ8dhakEY-FachIOseBIluAAKXZwACLVkYSt9sY5tsm1THNgQ.ogg
Content: Skipped binary file

File: /temp_voice/AwACAgIAAxkBAAILLmdD2c_SNwKb0YboVpN4qCP3NEGlAAKYZwACLVkYSiaK_tihX7OcNgQ.ogg
Content: Skipped binary file

File: /temp_voice/AwACAgIAAxkBAAILNGdD2lVXyUcVaqCU6IWHA-4tuWW_AAKZZwACLVkYSoCw3DVn_N0eNgQ.ogg
Content: Skipped binary file

File: /middlewares/counter.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject


class CounterMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        self.counter = 0
        logger.info("class CounterMiddleware __init__")

    async def __call__(self, handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]], event: TelegramObject, data: Dict[str, Any]) -> Any:
        # logger.info("class CounterMiddleware __call__")

        self.counter += 1
        data['counter'] = self.counter
        
        return await handler(event, data)


File: /handlers/admin.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext


from filters.is_admin import IsAdminListFilter
from filters.chat_type import ChatTypeFilter
from common import keyboard



admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private", "group", "supergroup","channel"]), IsAdminListFilter(is_admin=True))


# –∫–æ–º–∞–Ω–¥–∞ /help
@admin_router.message(Command("help"))
async def cmd_help(message: Message, bot: Bot):
    if message.from_user.id in bot.admin_list:
        await message.answer(text=('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                    '/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
                                    '/data - —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSMContext\n'
                                    '/get_id - id –¥–∏–∞–ª–æ–≥–∞\n'
                                    '/ping - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø–¥–µ–π—Ç–æ–≤\n'
                                    '/info - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'),
                            reply_markup=keyboard.del_kb
                            )


# —Ö–µ–Ω–¥–ª–µ—Ä, –ø–æ–∫–∞–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(Command("data"))
async def data_cmd(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(str(data))

# Here is some example !ping command ...
@admin_router.message(Command(commands=["ping"]),)
async def cmd_ping_bot(message: Message, counter):
    await message.answer(f"ping-{counter}")


# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
@admin_router.message(Command("get_id"))
async def get_chat_id_cmd(message: Message):
    await message.answer(f"ID: <code>{message.chat.id}</code>")

# —Ö–µ–Ω–¥–ª–µ—Ä /info
@admin_router.message(Command("info"))
async def cmd_info(message: Message):
    # photo = FSInputFile("common/images/image_info.jpg")
    await message.answer(text=('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n'
                                '1) –ë–æ—Ç –≤—Å–µ–≥–¥–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è\n'
                                '2) –ë–æ—Ç—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –≤–æ–π—Å\n'
                                '3) –ü–æ—Å–ª–µ –±–æ—Ç –≤—ã–≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n'
                                '–ö–Ω–æ–ø–∫–∏:\n\n'
                                '‚ÜóÔ∏è –î–æ–±–∞–≤–∏—Ç—å\n<i>–ë–æ—Ç –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ª–∏–±–æ –≤–æ–π—Å–∞</i>\n\n'
                                '‚è∫Ô∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å\n<i>–ë–æ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –∏ –≤—ã–≤–µ–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç</i>\n\n'
                                'üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å üîÑ\n<i>–ë–æ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏ –≤—ã–≤–µ–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç</i>\n\n'
                                '‚ÑπÔ∏è –ü–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç ‚ÑπÔ∏è\n<i>–ë–æ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞</i>\n\n'
                                '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\n<i>–ë–æ—Ç –æ—á–∏—Å—Ç–∏—Ç –ø–∞–º—è—Ç—å, –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è</i>\n\n'
                                '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å\n<i>–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥—Ä—É–ø–ø—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤ –∫–æ–Ω—Ü–µ</i>'))


File: /handlers/editor.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')


import asyncio
from pathlib import Path
from aiogram import Router, F, Bot
from aiogram.filters import StateFilter, or_f
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from openai import OpenAI
from filters.is_admin import IsAdminListFilter
from filters.chat_type import ChatTypeFilter
from common import keyboard
from config_data.config import load_config


editor_router = Router()
editor_router.message.filter(ChatTypeFilter(["private"]), IsAdminListFilter(is_admin=True))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è Editor
class Editor(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è Editor"""
    editor_wait_command = State()
    editor_wait_text = State()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
API_GPT = load_config().tg_bot.api_gpt

# –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT
async def fix_text_style(text: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT"""
    try:
        client = OpenAI(api_key=API_GPT)

        system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
                            1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                            2. –û–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ)
                            3. –†–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                            4. –ù–ï –º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ —Å–º—ã—Å–ª —Ç–µ–∫—Å—Ç–∞
                            5. –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å –∞–≤—Ç–æ—Ä–∞"""

        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{text}"}]
            )

        content = response.choices[0].message.content
        if content is None:
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        return content

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ GPT: %s", str(e))
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT
async def rephrase_text(text: str) -> str:
    """–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º."""
    try:
        client = OpenAI(api_key=API_GPT)

        system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
                            1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º
                            2. –£–ª—É—á—à–∏—Ç—å —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—á–∏
                            3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                            4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª, –∏–¥–µ—é –∏ –ø–æ—Å—ã–ª —Ç–µ–∫—Å—Ç–∞
                            5. –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Ñ–∞–∫—Ç—ã
                            6. –ù–ï –º–µ–Ω—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Ç–µ–∫—Å—Ç–∞"""

        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{text}"}
            ]
        )

        content = response.choices[0].message.content
        if content is None:
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        return content

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ GPT: %s", str(e))
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"


@editor_router.message(Editor.editor_wait_command, F.text)
async def editor_wait_command(message: Message, state: FSMContext, bot: Bot):
    if message.text == "‚ÜóÔ∏è –î–æ–±–∞–≤–∏—Ç—å":
        await message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.", reply_markup=keyboard.del_kb)
        await state.set_state(Editor.editor_wait_text)

    elif message.text == "‚è∫Ô∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å":
        data = await state.get_data()
        list_text = data.get('text',[])
        text = '\n'.join(list_text)
        await state.update_data(text=[text])
        await message.answer(f"‚è∫Ô∏è –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{text}</code>", reply_markup=keyboard.work_keyboard())
        await state.set_state(Editor.editor_wait_command)
        await asyncio.sleep(2)
        await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

    elif message.text == "üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å üîÑ":
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            data = await state.get_data()
            list_text = data.get('text', [])
            text = list_text[-1]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("‚åõÔ∏è –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")

            # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            rephrased_text = await rephrase_text(text)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            list_text[-1] = rephrased_text
            await state.update_data(text=list_text)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await message.answer(f"üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{rephrased_text}</code>",
                                 reply_markup=keyboard.work_keyboard())
            await asyncio.sleep(2)
            await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}",
                                 reply_markup=keyboard.work_keyboard())

    elif message.text == "‚ÑπÔ∏è –ü–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç ‚ÑπÔ∏è":
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            data = await state.get_data()
            list_text = data.get('text', [])
            text = list_text[-1]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("‚åõÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            fixed_text = await fix_text_style(text)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            list_text[-1] = fixed_text
            await state.update_data(text=list_text)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await message.answer(f"‚ÑπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{fixed_text}</code>",
                                 reply_markup=keyboard.work_keyboard())
            await asyncio.sleep(2)
            await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}",
                                 reply_markup=keyboard.work_keyboard())

    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=keyboard.del_kb)
        await state.clear()
        await asyncio.sleep(2)
        await message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.")

    elif message.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        data = await state.get_data()
        current_time = datetime.now().strftime("%d.%m.%Y")
        list_text = data.get('text',[])
        text = current_time + '\n\n' + '\n'.join(list_text)
        chat_id = bot.work_group[0]
        await bot.send_message(chat_id = chat_id, text = text)
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç", reply_markup=keyboard.del_kb)
        await state.clear()
        await asyncio.sleep(2)
        await message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.")

    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=keyboard.work_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@editor_router.message(Editor.editor_wait_command)
async def not_command(message: Message):
    await message.answer("–û–∂–∏–¥–∞—é –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=keyboard.work_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@editor_router.message(~StateFilter(Editor.editor_wait_command), or_f(F.text, F.voice))
async def editor_wait_text(message: Message, state: FSMContext, bot: Bot):
    if message.text:
        data = await state.get_data()
        list_text = data.get('text',[])
        list_text.append(message.text)
        await state.update_data(text=list_text)
        await message.answer(f"‚úçÔ∏è –¢—ã –Ω–∞–ø–∏—Å–∞–ª:\n\n<code>{message.text}</code>",
                         reply_markup=keyboard.work_keyboard())
        await state.set_state(Editor.editor_wait_command)
        await asyncio.sleep(2)
        await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

    elif message.voice:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚åõÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            voice = await bot.get_file(message.voice.file_id)

            if not voice.file_path:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            voice_dir = Path("temp_voice")
            voice_dir.mkdir(exist_ok=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
            voice_path = voice_dir / f"{message.voice.file_id}.ogg"

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await bot.download_file(voice.file_path, voice_path)
            logger.info("–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", voice_path)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
            client = OpenAI(api_key=API_GPT)

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            with open(voice_path, "rb") as audio_file:
                transcript = await asyncio.to_thread(client.audio.transcriptions.create,
                                                                    model="whisper-1",
                                                                    file=audio_file,
                                                                    language="ru"
                                                                    )

            transcribed_text = transcript.text

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
            data = await state.get_data()
            list_text = data.get('text', [])
            list_text.append(transcribed_text)
            await state.update_data(text=list_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_msg.delete()
            await message.answer(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{transcribed_text}</code>",
                                reply_markup=keyboard.work_keyboard())
            await state.set_state(Editor.editor_wait_command)
            await asyncio.sleep(2)
            await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

        except Exception as e:
            await processing_msg.delete()
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
                                 reply_markup=keyboard.work_keyboard())
            await state.set_state(Editor.editor_wait_command)
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e))

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if 'voice_path' in locals():
                try:
                    voice_path.unlink()
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %s", str(e))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@editor_router.message(~StateFilter(Editor.editor_wait_command))
async def not_text_not_voice(message: Message):
    await message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.\n–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∏–ª–∏ —Å–æ–∑–¥–∞–π –≤–æ–π—Å.\n–î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.",
                         reply_markup=keyboard.del_kb)


File: /handlers/start.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')

import asyncio
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.types import ChatMemberUpdated

from common import keyboard


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
start_router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@start_router.message(CommandStart())
async def start_cmd(message: Message, bot: Bot):
    user_name = message.from_user.username if message.from_user.username else 'None'
    user_id = message.from_user.id
    chat_id = bot.home_group[0]
    await bot.send_message(chat_id=chat_id, text=f"‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} - –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(text=(f'–ü—Ä–∏–≤–µ—Ç {user_name}.\n\n'
                                '–Ø –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram bot, model –¢-5. '
                                '–ï—Å–ª–∏ —Ç—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —Ç–æ —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n\n'
                                '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /help\n'
                                '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - /info'))

    await asyncio.sleep(2)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in bot.admin_list:
        await message.answer('–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.', reply_markup=keyboard.del_kb)


File: /filters/chat_type.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from typing import Union

from aiogram.filters import BaseFilter
from aiogram.types import Message

class ChatTypeFilter(BaseFilter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É —á–∞—Ç–∞.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'private', 'group') –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤.
    """
    def __init__(self, chat_type: Union[str, list]):
        self.chat_type = chat_type

    async def __call__(self, message: Message) -> bool:
        if isinstance(self.chat_type, str):
            return message.chat.type == self.chat_type
        else:
            return message.chat.type in self.chat_type


File: /filters/is_admin.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from aiogram.filters import BaseFilter
from aiogram.types import Message
from aiogram import Bot

class IsAdminGroupFilter(BaseFilter):
    """
    –§–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
    """
    def __init__(self, is_admin: bool):
        self.is_admin = is_admin

    async def __call__(self, message: Message) -> bool:
        member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.is_chat_admin() == self.is_admin

class IsAdminListFilter(BaseFilter):
    """
    –§–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    def __init__(self, is_admin: bool):
        self.is_admin = is_admin

    async def __call__(self, message: Message, bot: Bot) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        return (message.from_user.id in bot.admin_list) & self.is_admin


File: /config_data/config.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from dataclasses import dataclass
from environs import Env


@dataclass
class TgBot:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ.
    """
    token: str
    owner: list[int]
    admin_list: list[int]
    home_group: list[int]
    api_gpt: str


@dataclass
class Config:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    tg_bot: TgBot

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è .env
def load_config(path: str | None = None) -> Config:
    env = Env()
    env.read_env(path)

    owner = map(int, env('OWNER').split(','))
    admin_list = map(int, env('ADMIN_LIST').split(','))
    home_group = map(int, env('HOME_GROUP').split(','))

    return Config(
        tg_bot=TgBot(
            token=env('BOT_TOKEN'),
            owner=list(owner),
            admin_list=list(admin_list),
            home_group=list(home_group),
            api_gpt=env('API_GPT')
            )
        )


File: /common/comands.py
Content:
# —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ—Ç—É
# –∫–æ–º–∞–Ω–¥—ã –≤ –∫–Ω–æ–ø–∫–µ "–ú–µ–Ω—é", –ª–∏–±–æ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ "/"

from aiogram.types import BotCommand

private = [
    BotCommand(command='help',description='help'),
    BotCommand(command='info',description='info'),
]


File: /common/keyboard.py
Content:
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, KeyboardButtonPollType
from aiogram.utils.keyboard import ReplyKeyboardBuilder


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
del_kb = ReplyKeyboardRemove()


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(
    *btns: str,
    placeholder: str | None = None,
    request_contact: int | None = None,
    request_location: int | None = None,
    sizes: tuple = (2,),
):
    '''
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã request_contact –∏ request_location –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ btns –¥–ª—è –Ω—É–∂–Ω—ã—Ö –≤–∞–º –∫–Ω–æ–ø–æ–∫.
    –ü—Ä–∏–º–µ—Ä:
    get_keyboard(
            "–ú–µ–Ω—é",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            request_contact=4,
            sizes=(2, 2, 1)
        )
    '''
    keyboard = ReplyKeyboardBuilder()

    for index, text in enumerate(btns, start=0):
        if request_contact and request_contact == index: keyboard.add(KeyboardButton(text=text, request_contact=True))
        elif request_location and request_location == index: keyboard.add(KeyboardButton(text=text, request_location=True))
        else: keyboard.add(KeyboardButton(text=text))

    return keyboard.adjust(*sizes).as_markup(resize_keyboard=True, # —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–º–µ–Ω—å—à–µ
                                             input_field_placeholder=placeholder) # –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç placeholder


# –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—á–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def work_keyboard():
    return get_keyboard("‚ÜóÔ∏è –î–æ–±–∞–≤–∏—Ç—å", "‚è∫Ô∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å",
                        "üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å üîÑ",
                        "‚ÑπÔ∏è –ü–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç ‚ÑπÔ∏è",
                        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                        sizes=(2,1,1,2,1),
                        placeholder='‚¨áÔ∏è')

File: /common/images/image_info.jpg
Content: Skipped binary file

