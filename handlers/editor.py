import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from aiogram import Router, F, Bot
from aiogram.filters import StateFilter, or_f
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from openai import OpenAI
from filters.is_admin import IsAdminListFilter
from filters.chat_type import ChatTypeFilter
from common import keyboard
from config_data.config import load_config


editor_router = Router()
editor_router.message.filter(ChatTypeFilter(["private"]), IsAdminListFilter(is_admin=True))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è Editor
class Editor(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è Editor"""
    editor_wait_command = State()
    editor_wait_text = State()
    editor_wait_channel = State()
# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
API_GPT = load_config().tg_bot.api_gpt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = OpenAI(api_key=API_GPT)


# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
async def cleanup_temp_files():
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞"""
    try:
        voice_dir = Path("temp_voice")
        if not voice_dir.exists():
            return

        current_time = datetime.now()
        for file in voice_dir.glob("*.ogg"):
            file_time = datetime.fromtimestamp(file.stat().st_mtime)
            if current_time - file_time > timedelta(hours=1):
                file.unlink(missing_ok=True)
                logger.info("–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %s", file)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: %s", e)


# –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT
async def fix_text_style(text: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT"""
    try:
        system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
                            1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                            2. –û–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ)
                            3. –†–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                            4. –ù–ï –º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ —Å–º—ã—Å–ª —Ç–µ–∫—Å—Ç–∞
                            5. –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            6. –ù–ï –ø–∏—Å–∞—Ç—å –Ω–∏ —á–µ–≥–æ –æ—Ç —Å–µ–±—è
                            7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å –∞–≤—Ç–æ—Ä–∞"""

        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{text}"}]
            )

        content = response.choices[0].message.content
        if content is None:
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        return content

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ GPT: %s", str(e))
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT
async def rephrase_text(text: str) -> str:
    """–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º."""
    try:
        system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
                            1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º
                            2. –£–ª—É—á—à–∏—Ç—å —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—á–∏
                            3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                            4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª, –∏–¥–µ—é –∏ –ø–æ—Å—ã–ª —Ç–µ–∫—Å—Ç–∞
                            5. –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Ñ–∞–∫—Ç—ã
                            6. –ù–ï –º–µ–Ω—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Ç–µ–∫—Å—Ç–∞
                            7. –ù–ï –ø–∏—Å–∞—Ç—å –Ω–∏ —á–µ–≥–æ –æ—Ç —Å–µ–±—è"""

        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{text}"}
            ]
        )

        content = response.choices[0].message.content
        if content is None:
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        return content

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ GPT: %s", str(e))
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"


@editor_router.message(Editor.editor_wait_command, F.text)
async def editor_wait_command(message: Message, state: FSMContext, bot: Bot, chanel_dict: dict):
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    await cleanup_temp_files()

    if message.text == "‚ÜóÔ∏è –î–æ–±–∞–≤–∏—Ç—å":
        await message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.", reply_markup=keyboard.del_kb)
        await state.set_state(Editor.editor_wait_text)

    elif message.text == "‚è∫Ô∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å":
        data = await state.get_data()
        list_text = data.get('text',[])
        text = '\n'.join(list_text)
        await state.update_data(text=[text])
        await message.answer(f"‚è∫Ô∏è –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{text}</code>", reply_markup=keyboard.work_keyboard())
        await state.set_state(Editor.editor_wait_command)
        await asyncio.sleep(1)
        await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

    elif message.text == "üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å üîÑ":
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            data = await state.get_data()
            list_text = data.get('text', [])
            text = list_text[-1]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("‚åõÔ∏è –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")

            # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            rephrased_text = await rephrase_text(text)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            list_text[-1] = rephrased_text
            await state.update_data(text=list_text)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await message.answer(f"üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{rephrased_text}</code>",
                                 reply_markup=keyboard.work_keyboard())
            await asyncio.sleep(1)
            await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}",
                                 reply_markup=keyboard.work_keyboard())

    elif message.text == "‚ÑπÔ∏è –ü–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç ‚ÑπÔ∏è":
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            data = await state.get_data()
            list_text = data.get('text', [])
            text = list_text[-1]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("‚åõÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            fixed_text = await fix_text_style(text)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            list_text[-1] = fixed_text
            await state.update_data(text=list_text)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await message.answer(f"‚ÑπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{fixed_text}</code>",
                                 reply_markup=keyboard.work_keyboard())
            await asyncio.sleep(1)
            await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}",
                                 reply_markup=keyboard.work_keyboard())

    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=keyboard.del_kb)
        await state.clear()
        await asyncio.sleep(2)
        await message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.")

    elif message.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        inline_channels_keyboard = InlineKeyboardBuilder()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', reply_markup=keyboard.del_kb)
        await asyncio.sleep(1)
        for text, data in chanel_dict.items():
            btn = "btn_" + data
            inline_channels_keyboard.add(InlineKeyboardButton(text=text, callback_data=btn))
        inline_channels_keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="btn_cancel"))
        await message.answer('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', reply_markup=inline_channels_keyboard.adjust(1,1,1,1).as_markup())
        await state.set_state(Editor.editor_wait_channel)

    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=keyboard.work_keyboard())


@editor_router.callback_query(Editor.editor_wait_channel, F.data.startswith("btn_"))
async def editor_wait_channel(callback: CallbackQuery, state: FSMContext, bot: Bot, chanel_dict: dict):
    channel_data = callback.data.split('_')[1]
    channel_name = [k for k, v in chanel_dict.items() if v == channel_data]
    if channel_data == "cancel":
        await callback.message.delete()
        await callback.message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard.del_kb)
        data = await state.get_data()
        text = data.get('text',[])
        await callback.message.answer(f"‚úçÔ∏è –¢—ã –Ω–∞–ø–∏—Å–∞–ª:\n\n<code>{text}</code>")
        await state.set_state(Editor.editor_wait_command)
        await asyncio.sleep(1)
        await callback.message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è", reply_markup=keyboard.work_keyboard())
    else:
        channel_id = int(channel_data)
        data = await state.get_data()
        current_time = datetime.now().strftime("%d.%m.%Y")
        list_text = data.get('text',[])
        text = current_time + '\n\n' + '\n'.join(list_text)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            chat = await bot.get_chat(chat_id=channel_id)
            print(f"Chat found: {chat.title} (ID: {chat.id})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await bot.get_chat_member(chat_id=channel_id, user_id=bot.id)
            print(f"Bot rights: {bot_member.status}")

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await bot.send_message(chat_id=channel_id, text=text)
            print(f"Message sent successfully: {message.message_id}")

        except Exception as e:
            print(f"Error details: {type(e).__name__}: {str(e)}")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n<code>{str(e)}</code>", reply_markup=keyboard.del_kb)


        await callback.message.delete()
        await callback.message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ <b>{channel_name[0]}</b>", reply_markup=keyboard.del_kb)
        await state.clear()
        await asyncio.sleep(1)
        await callback.message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.", reply_markup=keyboard.del_kb)
        await state.set_state(Editor.editor_wait_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@editor_router.message(Editor.editor_wait_command)
async def not_command(message: Message):
    await message.answer("–û–∂–∏–¥–∞—é –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=keyboard.work_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@editor_router.message(~StateFilter(Editor.editor_wait_command), or_f(F.text, F.voice))
async def editor_wait_text(message: Message, state: FSMContext, bot: Bot):
    if message.text:
        data = await state.get_data()
        list_text = data.get('text',[])
        list_text.append(message.text)
        await state.update_data(text=list_text)
        await message.answer(f"‚úçÔ∏è –¢—ã –Ω–∞–ø–∏—Å–∞–ª:\n\n<code>{message.text}</code>",
                         reply_markup=keyboard.work_keyboard())
        await state.set_state(Editor.editor_wait_command)
        await asyncio.sleep(1)
        await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

    elif message.voice:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚åõÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            voice = await bot.get_file(message.voice.file_id)

            if not voice.file_path:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            voice_dir = Path("temp_voice")
            voice_dir.mkdir(exist_ok=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
            voice_path = voice_dir / f"{message.voice.file_id}.ogg"

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await bot.download_file(voice.file_path, voice_path)
            logger.info("–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", voice_path)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
            # client = OpenAI(api_key=API_GPT)

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            with open(voice_path, "rb") as audio_file:
                transcript = await asyncio.to_thread(client.audio.transcriptions.create,
                                                                    model="whisper-1",
                                                                    file=audio_file,
                                                                    language="ru"
                                                                    )

            transcribed_text = transcript.text

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
            data = await state.get_data()
            list_text = data.get('text', [])
            list_text.append(transcribed_text)
            await state.update_data(text=list_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_msg.delete()
            await message.answer(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<code>{transcribed_text}</code>",
                                reply_markup=keyboard.work_keyboard())
            await state.set_state(Editor.editor_wait_command)
            await asyncio.sleep(1)
            await message.answer("–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è")

        except Exception as e:
            await processing_msg.delete()
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
                                 reply_markup=keyboard.work_keyboard())
            await state.set_state(Editor.editor_wait_command)
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e))

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if 'voice_path' in locals():
                try:
                    voice_path.unlink()
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %s", str(e))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@editor_router.message(~StateFilter(Editor.editor_wait_command))
async def not_text_not_voice(message: Message):
    await message.answer("–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç, –∏–ª–∏ –≤–æ–π—Å.\n–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∏–ª–∏ —Å–æ–∑–¥–∞–π –≤–æ–π—Å.\n–î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.",
                         reply_markup=keyboard.del_kb)
